<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\AuthenticationError;
use \ccxt\ArgumentsRequired;

class bitclude extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'bitclude',
            'name' => 'Bitclude',
            'countries' => ['PL'],
            'rateLimit' => 2000,
            'certified' => false,
            'pro' => false,
            'urls' => array(
                'api' => array(
                    'public' => 'https://api.bitclude.com/',
                    'private' => 'https://api.bitclude.com/',
                ),
                'www' => 'https://bitclude.com',
                'doc' => 'https://docs.bitclude.com',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => false,
                'uid' => true,
            ),
            'has' => array(
                'fetchMarkets' => 'emulated',
                'fetchCurrencies' => true, // private
                'cancelAllOrders' => false,
                'fetchClosedOrders' => false,
                'createDepositAddress' => true,
                'fetchDepositAddress' => 'emulated',
                'fetchDeposits' => true,
                'fetchFundingFees' => 'emulated',
                'fetchMyTrades' => true,
                'fetchOHLCV' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchTickers' => true,
                'fetchTicker' => 'emulated',
                'fetchTrades' => true,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'withdraw' => false,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'stats/ticker.json',
                        'stats/orderbook_{base}{quote}.json',
                        'stats/history_{base}{quote}.json',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        '',
                    ),
                ),
            ),
            'exceptions' => array(
                // stolen, todo rewrite
                'exact' => array(
                    'Not enough balances' => '\\ccxt\\InsufficientFunds', // array("error":"Not enough balances","success":false)
                    'InvalidPrice' => '\\ccxt\\InvalidOrder', // array("error":"Invalid price","success":false)
                    'Size too small' => '\\ccxt\\InvalidOrder', // array("error":"Size too small","success":false)
                    'Missing parameter price' => '\\ccxt\\InvalidOrder', // array("error":"Missing parameter price","success":false)
                    'Order not found' => '\\ccxt\\OrderNotFound', // array("error":"Order not found","success":false)
                ),
                'broad' => array(
                    'Invalid parameter' => '\\ccxt\\BadRequest', // array("error":"Invalid parameter start_time","success":false)
                    'The requested URL was not found on the server' => '\\ccxt\\BadRequest',
                    'No such coin' => '\\ccxt\\BadRequest',
                    'No such market' => '\\ccxt\\BadRequest',
                    'An unexpected error occurred' => '\\ccxt\\ExchangeError', // array("error":"An unexpected error occurred, please try again later (58BC21C795).","success":false)
                ),
            ),
            'precisionMode' => DECIMAL_PLACES,
        ));
    }

    public function fetch_markets($params = array ()) {
        $response = $this->publicGetStatsTickerJson ($params);
        $result = array();
        $ids = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            list($baseId, $quoteId) = explode('_', $id);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = ($base . '/' . $quote);
            $precision = array(
                'price' => null,
                'amount' => null,
            );
            $info = array();
            $info[$id] = $this->safe_value($response, $id);
            $entry = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => true,
                'precision' => $precision,
                'limits' => null,
                'info' => $info,
            );
            $result[] = $entry;
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        if (!$this->apiKey || !$this->uid) {
            throw new AuthenticationError($this->id . " fetchCurrencies is an authenticated endpoint, therefore it requires 'apiKey' and 'uid' credentials. If you don't need $currency details, set exchange.has['fetchCurrencies'] = false before calling its methods.");
        }
        $request = array(
            'method' => 'account',
            'action' => 'getwalletsstatus',
        );
        $response = $this->privateGet (array_merge($request, $params));
        $ids = is_array($response) ? array_keys($response) : array();
        $result = array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            if ($id === 'success') {
                continue;
            }
            $currency = $response[$id];
            $code = $this->safe_currency_code($id);
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'info' => $currency,
                'name' => null,
                'active' => $this->safe_value($currency, 'is_online'),
                'fee' => $this->safe_float($currency, 'current_optimal_fee'),
                'precision' => $this->safe_integer($currency, 'decimal_point'),
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $this->safe_float($currency, 'current_minimal_amount'),
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $symbols = ($symbols === null) ? $this->symbols : $symbols;
        $tickers = $this->publicGetStatsTickerJson ($params);
        $marketIds = is_array($this->marketsById) ? array_keys($this->marketsById) : array();
        $result = array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $market = $this->marketsById[$marketId];
            $symbol = $market['symbol'];
            $ticker = $this->safe_value($tickers, $marketId);
            if ($this->in_array($symbol, $symbols)) {
                $result[$symbol] = $this->parse_ticker($ticker, $market);
            }
        }
        return $result;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $ticker = $this->fetch_tickers([$symbol]);
        return $this->safe_value($ticker, $symbol);
    }

    public function parse_ticker($ticker, $market) {
        $timestamp = $this->milliseconds();
        $symbol = $market['symbol'];
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_float($ticker, 'max24H'),
            'low' => $this->safe_float($ticker, 'min24H'),
            'bid' => $this->safe_float($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $this->safe_float($ticker, 'last'),
            'last' => $this->safe_float($ticker, 'last'),
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        list($baseId, $quoteId) = explode('_', $market['id']);
        $request = array(
            'base' => $baseId,
            'quote' => $quoteId,
        );
        $response = $this->publicGetStatsOrderbookBaseQuoteJson (array_merge($request, $params));
        $data = $this->safe_value($response, 'data');
        $timestamp = $this->safe_timestamp($data, 'timestamp');
        $parsedOrderBook = $this->parse_order_book($response, $timestamp, 'bids', 'asks', 1, 0);
        if ($limit !== null) {
            $parsedOrderBook['bids'] = $this->filter_by_since_limit($parsedOrderBook['bids'], null, $limit);
            $parsedOrderBook['asks'] = $this->filter_by_since_limit($parsedOrderBook['asks'], null, $limit);
        }
        return $parsedOrderBook;
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'base' => $market['baseId'],
            'quote' => $market['quoteId'],
        );
        $response = $this->publicGetStatsHistoryBaseQuoteJson (array_merge($request, $params));
        $trades = $this->safe_value($response, 'history');
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'method' => 'account',
            'action' => 'history',
        );
        $response = $this->privateGet (array_merge($request, $params));
        $trades = $this->safe_value($response, 'history', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //  fetchTrades
        //
        //    {
        //         "time":1531917229,
        //         "nr":"786",
        //         "$amount":"0.00018620",
        //         "$price":"7314.57",
        //         "$type":"a"
        //    }
        //
        //  fetchMyTrades
        //
        //    {
        //         "currency1" => "btc",
        //         "currency2" => "usd",
        //         "$amount" => "0.00100000",
        //         "time_close" => 1516212758,
        //         "$price" => "4.00",
        //         "fee_taker" => "50", // Idk what does it exactly means
        //         "fee_maker" => "0",
        //         "$type" => "bid",
        //         "action" => "open"
        //    }
        $id = $this->safe_string($trade, 'nr');
        $timestamp = $this->safe_integer_2($trade, 'time', 'time_close');
        if (is_array($trade) && array_key_exists('time', $trade)) {
            // API return $timestamp in different formats depending on endpoint. Of course this isn't specified in docs xD
            $timestamp = $timestamp * 1000;
        }
        $type = null;
        $baseId = $this->safe_string($trade, 'currency1');
        $quoteId = $this->safe_string($trade, 'currency2');
        $symbol = null;
        $quote = null;
        if ($baseId !== null && $quoteId !== null) {
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = ($base . '/' . $quote);
        } else {
            $symbol = $market['symbol'];
            $quote = $market['quote'];
        }
        $side = $this->safe_string($trade, 'type');
        if ($side === 'a' || $side === 'ask') {
            $side = 'sell';
        } else if ($side === 'b' || $side === 'bid') {
            $side = 'buy';
        }
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'amount');
        $cost = null;
        if ($price !== null) {
            if ($amount !== null) {
                $cost = $price * $amount;
                if ($this->currency($quote)['precision'] !== null) {
                    $cost = $this->currency_to_precision($quote, $cost);
                }
            }
        }
        $fee = null; // todo
        return array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => $type,
            'order' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $request = array(
            'method' => 'account',
            'action' => 'info',
        );
        $response = $this->privateGet (array_merge($request, $params));
        $result = array(
            'info' => $response,
        );
        $balances = $this->safe_value($response, 'balances', array());
        $currencies = is_array($balances) ? array_keys($balances) : array();
        for ($i = 0; $i < count($currencies); $i++) {
            $balance = $this->safe_value($balances, $currencies[$i]);
            $currencyCode = $this->safe_currency_code($currencies[$i]);
            $account = $this->account();
            $account['free'] = $this->safe_float($balance, 'active');
            $account['used'] = $this->safe_float($balance, 'inactive');
            $result[$currencyCode] = $account;
        }
        return $this->parse_balance($result);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $orderId = null;
        $response = null;
        $feeCost = null;
        $feeCurrency = null;
        if ($type === 'limit') {
            $request = array(
                'method' => 'transactions',
                'action' => $side,
                'market1' => $market['baseId'],
                'market2' => $market['quoteId'],
                'amount' => $this->currency_to_precision($market['base'], $amount),
                'rate' => $this->currency_to_precision($market['quote'], $price),
            );
            $response = $this->privateGet (array_merge($request, $params));
            $order = $this->safe_value($response, 'actions');
            $orderId = $this->safe_string($order, 'order');
        } else if ($type === 'market') {
            $request = array(
                'method' => 'account',
                'action' => 'convert',
            );
            $request['market1'] = ($side === 'sell') ? $market['baseId'] : $market['quoteId'];
            $request['market2'] = ($side === 'sell') ? $market['quoteId'] : $market['baseId'];
            $currencyOfAmount = ($side === 'sell') ? $market['base'] : $market['quote'];
            $request['amount'] = $this->currency_to_precision($currencyOfAmount, $amount);
            $response = $this->privateGet (array_merge($request, $params));
            $feeCurrency = ($side === 'sell') ? $market['quote'] : $market['base'];
            $feeCost = $this->safe_string($response, 'fee');
        }
        $timestamp = $this->milliseconds();
        return array(
            'id' => $orderId,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'status' => 'open',
            'symbol' => $market['symbol'],
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'filled' => null,
            'remaining' => null,
            'cost' => null,
            'fee' => array(
                'currency' => $feeCurrency,
                'cost' => $feeCost,
                'rate' => null,
            ),
            'trades' => null,
            'info' => $response,
        );
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'method' => 'account',
            'action' => 'activeoffers',
        );
        $response = $this->privateGet (array_merge($request, $params));
        $result = $this->safe_value($response, 'offers', array());
        $orders = $this->parse_orders($result, null, $since, $limit);
        if ($symbol !== null) {
            $orders = $this->filter_by($orders, 'symbol', $symbol);
        }
        return $orders;
    }

    public function parse_order($order, $market = null) {
        // due to very diverse structure of orders this method only work for these returned by fetchOpenOrders
        $status = 'open';
        $side = $this->safe_string($order, 'offertype');
        if ($side === 'ask') {
            $side = 'sell';
        } else if ($side === 'bid') {
            $side = 'buy';
        }
        $symbol = null;
        if ($market === null) {
            $baseId = $this->safe_string($order, 'currency1');
            $quoteId = $this->safe_string($order, 'currency2');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = ($base . '/' . $quote);
        } else {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->safe_integer($order, 'time_open');
        return array(
            'info' => $order,
            'id' => $this->safe_string($order, 'nr'),
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'price' => $this->safe_float($order, 'price'),
            'amount' => $this->safe_float($order, 'amount'),
            'remaining' => null,
            'filled' => null,
            'status' => $status,
            'fee' => null,
            'cost' => null,
            'trades' => null,
        );
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $side_in_params = (is_array($params) && array_key_exists('side', $params));
        if (!$side_in_params) {
            throw new ArgumentsRequired($this->id . ' cancelOrder requires a `$side` parameter (sell or buy)');
        }
        $side = ($params['side'] === 'buy') ? 'bid' : 'ask'; // Typo could cause cancel wrong order. todo => handle typo
        $params = $this->omit($params, array( 'side', 'currency' ));
        $request = array(
            'method' => 'transactions',
            'action' => 'cancel',
            'order' => intval ($id),
            'typ' => $side,
        );
        return $this->privateGet (array_merge($request, $params));
    }

    public function cancel_unified_order($order, $params = array ()) {
        // https://github.com/ccxt/ccxt/issues/6838
        $request = array(
            'side' => $order['side'],
        );
        return $this->cancel_order($order['id'], null, array_merge($request, $params));
    }

    public function create_deposit_address($code, $params = array ()) {
        // not yet documented exchange api method
        $this->load_markets();
        $currencyId = $this->currency_id($code);
        $request = array(
            'method' => 'account',
            'action' => 'newaddress',
            'currency' => $currencyId,
        );
        $response = $this->privateGet (array_merge($request, $params));
        $address = $this->safe_string($response, 'address');
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'info' => $response,
        );
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currencyId = $this->currency_id($code);
        $currencyId = strtoupper($currencyId);
        $request = array(
            'method' => 'account',
            'action' => 'info',
        );
        $response = $this->privateGet (array_merge($request, $params));
        $deposits = $this->safe_value($response, 'deposit');
        $deposit = $this->safe_value($deposits, $currencyId);
        $address = $this->safe_string($deposit, 'deposit');
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'info' => $response,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchDeposits requires a $currency $code argument');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $currencyId = $currency['id'];
        $request = array(
            'method' => 'account',
            'action' => 'deposits',
            'currency' => $currencyId,
        );
        $response = $this->privateGet (array_merge($request, $params));
        $transactions = $this->safe_value($response, 'history', array());
        return $this->parse_transactions($transactions, $currency);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchDeposits requires a $currency $code argument');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $currencyId = $currency['id'];
        $request = array(
            'method' => 'account',
            'action' => 'withdrawals',
            'currency' => $currencyId,
        );
        $response = $this->privateGet (array_merge($request, $params));
        $transactions = $this->safe_value($response, 'history', array());
        return $this->parse_transactions($transactions, $currency);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //     {
        //       "time" => "1530883428",
        //       "$amount" => "0.13750000",
        //       "type" => "b787400027b4eae298bad72150384540a23342daaa3eec1c8d17459c103c6bbc",
        //       "state" => "1"
        //     }
        //
        // fetchWithdrawals
        //
        //     array(
        //         "time" => "1528715035",
        //         "$amount" => "1.00000000",
        //         "tx" => "01b8ae6437843879574b69daf95542aff43a4aefaa90e8f70ebf572eccf01cad",
        //         "$address" => "2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF",
        //         "state" => "0"
        //     ),
        //
        $timestamp = $this->safe_integer($transaction, 'time');
        $currencyCode = $this->safe_string($currency, 'code');
        $amount = $this->safe_float($transaction, 'amount');
        $address = $this->safe_string($transaction, 'address');
        $status = $this->safe_string($transaction, 'state'); // todo => ask support
        $txid = $this->safe_string_2($transaction, 'type', 'tx');
        return array(
            'info' => $transaction,
            'id' => null,
            'currency' => $currencyCode,
            'amount' => $amount,
            'address' => $address,
            'tag' => null,
            'status' => $status,
            'type' => null,
            'updated' => null,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => null,
        );
    }

    public function fetch_trading_fees($params = array ()) {
        $this->load_markets();
        $request = array(
            'method' => 'account',
            'action' => 'info',
        );
        $response = $this->privateGet (array_merge($request, $params));
        $account = $this->safe_value($response, 'account');
        $fees = $this->safe_value($account, 'fee');
        return array(
            'info' => $response,
            'maker' => $this->safe_float($fees, 'maker'),
            'taker' => $this->safe_float($fees, 'taker'),
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $request = '/' . $this->implode_params($path, $params);
        $url = $this->urls['api'][$api] . $request;
        if ($api === 'private') {
            $this->check_required_credentials();
            $params['id'] = $this->uid;
            $params['key'] = $this->apiKey;
        }
        if ($params) {
            $url .= '?' . $this->urlencode($params);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
